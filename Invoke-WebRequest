param(
[string]$Envs,
[string]$Apps,
[string]$JobsToBuild,
[string]$PARAMETER2
)

Write-Host $Envs
Write-Host $Apps
Write-Host $JobsToBuild
Write-Host $Label

Function global:SCP_Code_Build{
$JobURL = "$JENKINS_URL/job/SCP_Code_Build/"
$user = 'admin'
$pass = 'PASSWORD_API'
$pair = "$($user):$($pass)"
$encodedCreds = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($pair))
$basicAuthValue = "Basic $encodedCreds"
$Headers = @{
     Authorization = $basicAuthValue
}
Invoke-WebRequest -Uri "$JobURL/buildWithParameters?Project_Version=1.2.4&Label=$Label" -Headers $Headers -method POST
}

Function global:BPMGMNT_PROJ_IIB10_T2_BRANCH{
$JobURL = "$JENKINS_URL/job/BPMGMNT_PROJECT_IIB10_T2_BRANCH/"
$user = 'admin'
$pass = 'PASSWORD_API'
$pair = "$($user):$($pass)"
$encodedCreds = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($pair))
$basicAuthValue = "Basic $encodedCreds"
$Headers = @{
     Authorization = $basicAuthValue
}
Invoke-WebRequest -Uri "$JobURL/buildWithParameters?Project_Version=1.2.4&Label=$Label" -Headers $Headers -method POST
}

$testing_options_final = $JobsToBuild.split(",");
foreach($l in $testing_options_final){
if("$l" -eq "BPMGMNT_PROJ_IIB10_T2_BRANCH"){
Write-Output "This is calling BPMGMNT_PROJ_IIB10_T2_BRANCH"
BPMGMNT_PROJ_IIB10_T2_BRANCH
}
elseif("$l" -eq "SCP_Code_Build"){
Write-Output "This is calling SCP_Code_Build"
SCP_Code_Build
}
else{
Write-Warning  "This is wrong input"
}
}
